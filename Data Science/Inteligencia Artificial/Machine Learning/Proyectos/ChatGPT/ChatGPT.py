import openai  # pip install openai
import typer  # pip install "typer[all]"
from rich import print  # pip install rich
from rich.table import Table
import config

"""
Webs de interÃ©s:
- MÃ³dulo OpenAI: https://github.com/openai/openai-python
- DocumentaciÃ³n API ChatGPT: https://platform.openai.com/docs/api-reference/chat
- Typer: https://typer.tiangolo.com
- Rich: https://rich.readthedocs.io/en/stable/
"""


def main():

    openai.api_key = config.api_key  # TU_API_KEY creada en https://platform.openai.com

    # [/bold green] propiedades del paquete rich.table
    print("ğŸ’¬ [bold green]ChatGPT API en Python[/bold green]")

    # Agregar la tabla visible en la consola despues de la ejecucion
    table = Table("Comando", "DescripciÃ³n")
    table.add_row("exit", "Salir de la aplicaciÃ³n")
    table.add_row("new", "Crear una nueva conversaciÃ³n")

    print(table)

    # Contexto del asistente, 'Eres un asistente muy Ãºtil' hace que chatgpt de respuestas mas completas
    context = {"role": "system",
               "content": "Eres un asistente muy Ãºtil."}
    messages = [context]

    while True:

        content = __prompt()

        if content == "new":
            print("ğŸ†• Nueva conversaciÃ³n creada")
            messages = [context]
            content = __prompt()

        messages.append({"role": "user", "content": content})

        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo", messages=messages)

        response_content = response.choices[0].message.content

        messages.append({"role": "assistant", "content": response_content})

        print(f"[bold green]> [/bold green] [green]{response_content}[/green]")


# Funcion que controlara el comando de exit y agrega confirmacion [y/n] todo incluido en typer
def __prompt() -> str:  # la obligo a ser string
    prompt = typer.prompt("\nÂ¿Sobre quÃ© quieres hablar? ")

    if prompt == "exit":
        exit = typer.confirm("âœ‹ Â¿EstÃ¡s seguro?")
        if exit:
            print("ğŸ‘‹ Â¡Hasta luego!")
            raise typer.Abort()

        return __prompt()

    return prompt


""" Esta lÃ­nea de cÃ³digo se utiliza comÃºnmente en Python para indicar que el cÃ³digo siguiente solo debe ejecutarse si el archivo actual se estÃ¡ ejecutando como un programa independiente y no se estÃ¡ importando 
como un mÃ³dulo en otro programa.

En otras palabras, cuando se ejecuta un archivo de Python, la variable especial `__name__` se establece en "__main__". Por lo tanto, si la lÃ­nea `if __name__ == "__main__":` se utiliza en un archivo de Python,  
el cÃ³digo dentro de esta condiciÃ³n solo se ejecutarÃ¡ si se estÃ¡ ejecutando directamente el archivo, y no si se importa como un mÃ³dulo dentro de otro programa. Esta lÃ­nea de cÃ³digo es Ãºtil para evitar que ciertas
secciones de cÃ³digo se ejecuten accidentalmente cuando se importan de forma incorrecta. """
if __name__ == "__main__":
    typer.run(main)
